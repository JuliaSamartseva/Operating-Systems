package org.example;

public class Lexer {
  public static final int YYEOF = -1;
  private static final int BUFFERSIZE = 10000;

  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;
  public static final int STRING = 1;
  public static final int CHARLITERAL = 2;
  public static final int PRETREATMENT = 3;
  public static final int DEFINE = 4;
  public static final int DEFINE_NEW_LINE = 5;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\30\1\75" +
                  "\1\24\1\27\1\6\1\75\1\77\1\25\1\62\1\63\1\5\1\101" +
                  "\1\71\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\76" +
                  "\1\70\1\74\1\72\1\73\1\76\1\0\3\14\1\20\1\22\1\20" +
                  "\5\102\1\12\13\102\1\13\2\102\1\66\1\26\1\67\1\75\1\54" +
                  "\1\0\1\45\1\51\1\42\1\41\1\31\1\37\1\46\1\53\1\36" +
                  "\1\102\1\52\1\34\1\47\1\40\1\33\1\44\1\102\1\32\1\35" +
                  "\1\50\1\43\1\60\1\57\1\56\1\55\1\61\1\64\1\100\1\65" +
                  "\1\76\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6" +
                  "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6" +
                  "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0" +
                  "\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0" +
                  "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0" +
                  "\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0" +
                  "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0" +
                  "\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\37\7" +
                  "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6" +
                  "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7" +
                  "\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7" +
                  "\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7" +
                  "\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6\1\0" +
                  "\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7\1\6" +
                  "\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0" +
                  "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0" +
                  "\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0" +
                  "\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0" +
                  "\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6" +
                  "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6" +
                  "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7" +
                  "\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7" +
                  "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6" +
                  "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7" +
                  "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0" +
                  "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0" +
                  "\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0" +
                  "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7" +
                  "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0" +
                  "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0" +
                  "\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0" +
                  "\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0" +
                  "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0" +
                  "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6" +
                  "\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0" +
                  "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6" +
                  "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0" +
                  "\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6" +
                  "\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0" +
                  "\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0" +
                  "\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0" +
                  "\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0" +
                  "\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6" +
                  "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0" +
                  "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0" +
                  "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7" +
                  "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0" +
                  "\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0" +
                  "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6" +
                  "\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7" +
                  "\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7" +
                  "\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7" +
                  "\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6" +
                  "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6" +
                  "\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6" +
                  "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6" +
                  "\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6" +
                  "\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6" +
                  "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0" +
                  "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6" +
                  "\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0" +
                  "\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0" +
                  "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7" +
                  "\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7" +
                  "\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7" +
                  "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6" +
                  "\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7" +
                  "\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7" +
                  "\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0" +
                  "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0" +
                  "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0" +
                  "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0" +
                  "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0" +
                  "\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0" +
                  "\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0" +
                  "\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0" +
                  "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0" +
                  "\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0" +
                  "\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0" +
                  "\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0" +
                  "\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6" +
                  "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7" +
                  "\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0" +
                  "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0" +
                  "\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0" +
                  "\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0" +
                  "\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6" +
                  "\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6" +
                  "\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6" +
                  "\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6" +
                  "\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7" +
                  "\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6" +
                  "\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7" +
                  "\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0" +
                  "\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7" +
                  "\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0" +
                  "\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0" +
                  "\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6" +
                  "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6" +
                  "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6" +
                  "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6" +
                  "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6" +
                  "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7" +
                  "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6" +
                  "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6" +
                  "\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\6\0\1\1\2\2\1\3\2\4\1\5\2\6\1\7" +
                  "\1\4\1\10\1\11\1\1\23\5\1\12\1\13\1\14" +
                  "\1\15\1\16\1\17\1\20\1\21\6\4\1\22\2\23" +
                  "\1\24\1\1\1\25\1\26\1\1\2\27\4\30\1\31" +
                  "\5\30\2\32\1\33\1\0\1\6\1\34\1\6\1\0" +
                  "\3\6\2\34\10\0\12\5\1\35\10\5\1\35\26\5" +
                  "\1\22\1\36\1\0\2\33\1\0\4\6\1\34\5\0" +
                  "\1\37\4\0\54\5\2\36\1\0\3\6\10\0\37\5" +
                  "\3\6\1\0\1\40\4\0\12\5\1\35\7\5\3\6" +
                  "\1\37\3\0\12\5\3\6\4\5\3\6\2\5\3\6" +
                  "\1\5\3\6\1\5\1\0\2\6\1\0\2\6\1\0" +
                  "\2\6\1\0\2\6\1\0\2\6\1\0\2\6\1\0" +
                  "\1\6\1\34\1\0\5\34";

  private static int[] zzUnpackAction() {
    int[] result = new int[337];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5" +
                  "\0\u0192\0\u0192\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367" +
                  "\0\u03aa\0\u0192\0\u0192\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9" +
                  "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711" +
                  "\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0192" +
                  "\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0929" +
                  "\0\u096c\0\u0192\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0192" +
                  "\0\u0192\0\u0afe\0\u0192\0\u0192\0\u0b41\0\u0192\0\u0b84\0\u0192" +
                  "\0\u0bc7\0\u0c0a\0\u0c4d\0\u0192\0\u0c90\0\u0cd3\0\u0d16\0\u0d59" +
                  "\0\u0d9c\0\u0ddf\0\u0192\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0192" +
                  "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u0192\0\u103a\0\u107d\0\u03ed" +
                  "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295" +
                  "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad" +
                  "\0\u029e\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682" +
                  "\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a" +
                  "\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2" +
                  "\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca" +
                  "\0\u0192\0\u1d0d\0\u1d50\0\u1d93\0\u0192\0\u1dd6\0\u1e19\0\u1e5c" +
                  "\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074" +
                  "\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c" +
                  "\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4" +
                  "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc" +
                  "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4" +
                  "\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec" +
                  "\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04" +
                  "\0\u2d47\0\u2d8a\0\u0192\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9" +
                  "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1" +
                  "\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309" +
                  "\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521" +
                  "\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739" +
                  "\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951" +
                  "\0\u3994\0\u39d7\0\u0192\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26" +
                  "\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e" +
                  "\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56" +
                  "\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u0192\0\u40a5\0\u40e8\0\u412b" +
                  "\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343" +
                  "\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u3dc4" +
                  "\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730" +
                  "\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948" +
                  "\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60" +
                  "\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u4d78" +
                  "\0\u4dbb\0\u4dfe\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d" +
                  "\0\u4f90";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[337];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\7" +
                  "\1\16\1\17\3\15\3\17\1\15\1\20\1\15\1\21" +
                  "\1\22\1\23\1\7\1\24\1\12\1\25\1\26\1\27" +
                  "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37" +
                  "\1\40\1\41\1\42\1\43\1\44\1\45\5\15\1\46" +
                  "\1\47\1\15\1\50\1\51\1\52\1\53\1\54\1\55" +
                  "\1\56\1\57\1\14\1\60\1\61\1\14\1\62\1\63" +
                  "\1\64\1\65\1\15\1\66\1\67\1\70\21\66\1\71" +
                  "\1\66\1\72\54\66\1\73\1\67\1\70\22\73\1\74" +
                  "\1\75\54\73\1\7\1\67\1\70\1\76\1\77\3\7" +
                  "\15\76\3\7\32\76\11\7\2\76\5\7\1\76\1\7" +
                  "\1\67\1\70\1\100\1\101\1\102\2\7\13\100\1\103" +
                  "\2\7\1\104\1\7\42\100\1\102\1\105\1\106\1\102" +
                  "\1\100\1\107\1\110\1\111\1\100\1\7\1\112\1\113" +
                  "\1\100\24\7\1\100\52\7\105\0\1\11\104\0\1\114" +
                  "\1\115\64\0\1\62\102\0\1\62\16\0\13\15\1\0" +
                  "\1\15\6\0\31\15\20\0\1\15\10\0\1\116\1\117" +
                  "\1\120\1\121\1\0\1\122\1\123\1\124\1\125\1\126" +
                  "\1\127\6\0\1\127\2\0\1\120\2\0\1\125\1\0" +
                  "\1\125\14\0\1\121\34\0\2\17\1\120\2\0\3\17" +
                  "\1\125\1\126\1\127\6\0\1\127\2\0\1\120\2\0" +
                  "\1\125\1\0\1\125\51\0\2\126\3\0\3\126\106\0" +
                  "\1\62\46\0\1\62\40\0\1\130\1\131\2\0\1\132" +
                  "\1\0\1\133\2\0\1\134\1\0\1\135\1\136\44\0" +
                  "\13\15\1\0\1\15\6\0\3\15\1\137\3\15\1\140" +
                  "\15\15\1\141\3\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\1\142\30\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\13\15\1\143\15\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\2\15\1\144\26\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\5\15" +
                  "\1\145\11\15\1\146\2\15\1\147\3\15\1\150\2\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\6\15" +
                  "\1\151\1\152\21\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\1\15\1\153\1\154\1\155\10\15\1\156" +
                  "\14\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\1\157\13\15\1\160\14\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\1\161\1\15\1\162\21\15\1\163" +
                  "\4\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\2\15\1\164\1\165\10\15\1\166\5\15\1\167\6\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\4\15" +
                  "\1\170\2\15\1\171\21\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\1\15\1\172\10\15\1\173\16\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\4\15" +
                  "\1\174\5\15\1\175\16\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\2\15\1\175\26\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\12\15\1\176\16\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\1\177" +
                  "\1\200\20\15\1\201\1\15\1\202\4\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\1\15\1\203\1\204" +
                  "\26\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\11\15\1\205\10\15\1\206\6\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\2\15\1\207\2\15\1\210" +
                  "\23\15\20\0\1\15\72\0\1\62\1\14\101\0\1\62" +
                  "\1\0\1\14\100\0\1\62\4\0\1\62\75\0\1\62" +
                  "\5\0\1\62\74\0\1\62\6\0\1\62\1\0\1\66" +
                  "\2\0\21\66\1\0\1\66\1\0\54\66\2\0\1\70" +
                  "\100\0\2\211\1\0\100\211\2\73\1\0\100\73\4\0" +
                  "\1\212\1\213\101\0\1\212\1\213\64\0\1\100\102\0" +
                  "\1\100\33\0\1\100\46\0\1\100\102\0\1\100\1\102" +
                  "\101\0\1\100\1\0\1\102\100\0\1\100\4\0\1\100" +
                  "\75\0\1\100\5\0\1\100\74\0\1\100\6\0\1\100" +
                  "\3\0\1\113\100\0\1\114\1\214\1\215\100\114\5\115" +
                  "\1\216\75\115\10\0\1\116\1\117\1\120\2\0\1\122" +
                  "\1\123\1\124\1\125\1\126\1\127\6\0\1\127\2\0" +
                  "\1\120\2\0\1\125\1\0\1\125\51\0\2\117\3\0" +
                  "\3\117\1\125\1\126\1\127\6\0\1\127\5\0\1\125" +
                  "\1\0\1\125\51\0\1\217\1\220\2\0\5\220\1\0" +
                  "\1\220\6\0\1\220\5\0\1\220\1\0\2\220\2\0" +
                  "\1\220\3\0\1\220\41\0\1\221\1\117\1\120\2\0" +
                  "\3\221\1\125\1\126\1\127\6\0\1\127\2\0\1\120" +
                  "\2\0\1\125\1\0\1\125\51\0\1\124\1\117\1\120" +
                  "\2\0\3\124\1\125\1\126\1\127\6\0\1\127\2\0" +
                  "\1\120\2\0\1\125\1\0\1\125\51\0\1\222\1\117" +
                  "\1\120\2\0\3\222\1\125\1\126\1\127\6\0\1\127" +
                  "\2\0\1\120\2\0\1\125\1\0\1\125\51\0\2\126" +
                  "\3\0\3\126\1\125\1\0\1\127\6\0\1\127\5\0" +
                  "\1\125\1\0\1\125\51\0\2\223\3\0\3\223\3\0" +
                  "\1\224\55\0\1\224\33\0\1\225\1\0\1\226\3\0" +
                  "\1\227\100\0\1\230\103\0\1\231\1\232\73\0\1\233" +
                  "\111\0\1\234\74\0\1\235\56\0\13\15\1\0\1\15" +
                  "\6\0\4\15\1\236\24\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\12\15\1\174\16\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\13\15\1\237\3\15" +
                  "\1\240\11\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\4\15\1\241\1\242\7\15\1\243\1\15\1\244" +
                  "\11\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\1\245\30\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\7\15\1\246\21\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\15\15\1\247\12\15\1\250\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\1\15\1\251" +
                  "\12\15\1\252\14\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\2\15\1\253\26\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\5\15\1\254\23\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\3\15\1\255" +
                  "\13\15\1\151\11\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\5\15\1\256\23\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\1\15\1\151\27\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\2\15\1\257" +
                  "\26\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\3\15\1\137\25\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\26\15\1\151\2\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\16\15\1\260\12\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\3\15\1\261" +
                  "\2\15\1\262\22\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\12\15\1\263\16\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\7\15\1\264\21\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\7\15\1\265" +
                  "\21\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\14\15\1\266\14\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\4\15\1\236\12\15\1\267\11\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\14\15\1\154" +
                  "\14\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\5\15\1\144\23\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\4\15\1\270\1\271\23\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\2\15\1\272\2\15" +
                  "\1\273\23\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\20\15\1\274\10\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\16\15\1\151\12\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\17\15\1\275\11\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\17\15" +
                  "\1\276\11\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\16\15\1\277\12\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\12\15\1\236\11\15\1\151\4\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\1\15" +
                  "\1\300\3\15\1\301\23\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\13\15\1\302\15\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\1\303\30\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\2\15\1\304" +
                  "\26\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\22\15\1\305\6\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\5\15\1\306\23\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\3\15\1\307\1\15\1\310" +
                  "\23\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\1\15\1\311\27\15\20\0\1\15\1\212\1\312\1\313" +
                  "\100\212\5\213\1\314\75\213\2\0\1\215\100\0\4\115" +
                  "\1\215\1\216\75\115\10\0\1\217\1\220\1\120\1\0" +
                  "\5\220\1\0\1\220\6\0\1\220\2\0\1\120\2\0" +
                  "\1\220\1\0\2\220\2\0\1\220\3\0\1\220\41\0" +
                  "\2\315\1\120\1\0\5\315\1\0\1\315\6\0\1\315" +
                  "\2\0\1\120\2\0\1\315\1\0\2\315\2\0\1\315" +
                  "\3\0\1\315\41\0\1\316\1\117\1\120\2\0\3\316" +
                  "\1\125\1\126\1\127\6\0\1\127\2\0\1\120\2\0" +
                  "\1\125\1\0\1\125\51\0\1\317\1\117\1\120\2\0" +
                  "\3\317\1\125\1\126\1\127\6\0\1\127\2\0\1\120" +
                  "\2\0\1\125\1\0\1\125\51\0\2\223\3\0\3\223" +
                  "\1\125\16\0\1\125\1\0\1\125\51\0\2\223\3\0" +
                  "\3\223\115\0\1\320\105\0\1\321\1\322\105\0\1\323" +
                  "\101\0\1\321\102\0\1\234\1\324\103\0\1\325\77\0" +
                  "\1\326\104\0\1\324\106\0\1\327\43\0\13\15\1\0" +
                  "\1\15\6\0\1\151\30\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\3\15\1\330\25\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\1\331\30\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\17\15\1\332" +
                  "\11\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\7\15\1\333\21\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\5\15\1\334\23\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\12\15\1\331\16\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\1\15\1\335" +
                  "\27\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\15\15\1\151\13\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\7\15\1\336\21\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\1\337\30\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\12\15\1\340\16\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\17\15" +
                  "\1\341\11\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\1\15\1\342\27\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\17\15\1\267\11\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\5\15\1\343\23\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\1\344" +
                  "\30\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\14\15\1\342\14\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\1\345\30\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\1\346\30\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\14\15\1\347\14\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\20\15\1\306" +
                  "\10\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\14\15\1\350\14\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\4\15\1\351\12\15\1\352\11\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\4\15\1\301" +
                  "\24\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\11\15\1\353\17\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\5\15\1\354\23\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\2\15\1\355\26\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\17\15\1\356" +
                  "\11\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\27\15\1\357\1\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\3\15\1\360\25\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\2\15\1\151\26\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\14\15\1\263" +
                  "\14\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\13\15\1\361\15\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\2\15\1\157\26\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\4\15\1\151\24\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\1\362\30\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\14\15" +
                  "\1\363\14\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\3\15\1\151\25\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\14\15\1\364\14\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\3\15\1\236\25\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\14\15" +
                  "\1\365\14\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\10\15\1\151\20\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\17\15\1\366\11\15\20\0\1\15" +
                  "\2\0\1\313\100\0\4\213\1\313\1\314\75\213\10\0" +
                  "\2\367\1\120\1\0\5\367\1\0\1\367\6\0\1\367" +
                  "\2\0\1\120\2\0\1\367\1\0\2\367\2\0\1\367" +
                  "\3\0\1\367\41\0\1\370\1\117\1\120\2\0\3\370" +
                  "\1\125\1\126\1\127\6\0\1\127\2\0\1\120\2\0" +
                  "\1\125\1\0\1\125\51\0\1\371\1\117\1\120\2\0" +
                  "\3\371\1\125\1\126\1\127\6\0\1\127\2\0\1\120" +
                  "\2\0\1\125\1\0\1\125\74\0\1\372\100\0\1\373" +
                  "\110\0\1\373\101\0\1\322\75\0\1\374\105\0\1\375" +
                  "\104\0\1\376\112\0\1\377\42\0\13\15\1\0\1\15" +
                  "\6\0\5\15\1\u0100\23\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\1\15\1\355\27\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\1\15\1\u0101\27\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\17\15" +
                  "\1\u0102\11\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\4\15\1\u0103\24\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\14\15\1\u0104\14\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\1\310\30\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\2\15\1\u0105" +
                  "\26\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\11\15\1\342\17\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\5\15\1\u0106\23\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\17\15\1\151\11\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\7\15\1\236" +
                  "\21\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\7\15\1\310\21\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\4\15\1\u0107\24\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\17\15\1\236\11\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\12\15\1\u0108" +
                  "\16\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\16\15\1\u0109\12\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\17\15\1\u010a\11\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\5\15\1\u010b\23\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\22\15\1\151" +
                  "\6\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\15\15\1\247\13\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\7\15\1\151\21\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\1\u010c\30\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\14\15\1\346\14\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\5\15" +
                  "\1\u010d\23\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\3\15\1\357\25\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\5\15\1\310\1\15\1\u010e\1\u010f" +
                  "\20\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\21\15\1\151\7\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\1\15\1\u0110\27\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\17\15\1\206\11\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\12\15\1\u0111" +
                  "\16\15\20\0\1\15\10\0\2\u0112\1\120\1\0\5\u0112" +
                  "\1\0\1\u0112\6\0\1\u0112\2\0\1\120\2\0\1\u0112" +
                  "\1\0\2\u0112\2\0\1\u0112\3\0\1\u0112\41\0\1\u0113" +
                  "\1\117\1\120\2\0\3\u0113\1\125\1\126\1\127\6\0" +
                  "\1\127\2\0\1\120\2\0\1\125\1\0\1\125\51\0" +
                  "\1\u0114\1\117\1\120\2\0\3\u0114\1\125\1\126\1\127" +
                  "\6\0\1\127\2\0\1\120\2\0\1\125\1\0\1\125" +
                  "\73\0\1\373\107\0\1\u0115\106\0\1\u0116\77\0\1\u0117" +
                  "\111\0\1\u0118\41\0\13\15\1\0\1\15\6\0\11\15" +
                  "\1\u0119\17\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\5\15\1\340\23\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\1\u011a\30\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\17\15\1\u011b\11\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\17\15\1\u011c" +
                  "\11\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\6\15\1\151\22\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\11\15\1\u010a\17\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\13\15\1\u011d\15\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\3\15\1\342" +
                  "\25\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\5\15\1\u011e\23\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\23\15\1\u011f\5\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\7\15\1\u0120\21\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\11\15\1\u0121" +
                  "\17\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\11\15\1\151\17\15\20\0\1\15\6\0\13\15\1\0" +
                  "\1\15\6\0\14\15\1\u0122\14\15\20\0\1\15\6\0" +
                  "\13\15\1\0\1\15\6\0\1\u0105\30\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\23\15\1\342\5\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\14\15" +
                  "\1\304\14\15\20\0\1\15\10\0\2\u0123\1\120\1\0" +
                  "\5\u0123\1\0\1\u0123\6\0\1\u0123\2\0\1\120\2\0" +
                  "\1\u0123\1\0\2\u0123\2\0\1\u0123\3\0\1\u0123\41\0" +
                  "\1\u0124\1\117\1\120\2\0\3\u0124\1\125\1\126\1\127" +
                  "\6\0\1\127\2\0\1\120\2\0\1\125\1\0\1\125" +
                  "\51\0\1\u0125\1\117\1\120\2\0\3\u0125\1\125\1\126" +
                  "\1\127\6\0\1\127\2\0\1\120\2\0\1\125\1\0" +
                  "\1\125\102\0\1\321\72\0\1\u0115\116\0\1\373\43\0" +
                  "\13\15\1\0\1\15\6\0\5\15\1\342\23\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\1\15\1\u0126" +
                  "\27\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\1\154\30\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\2\15\1\154\26\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\14\15\1\u0127\14\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\11\15\1\u0128\17\15" +
                  "\20\0\1\15\6\0\13\15\1\0\1\15\6\0\11\15" +
                  "\1\u0129\17\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\12\15\1\236\16\15\20\0\1\15\6\0\13\15" +
                  "\1\0\1\15\6\0\17\15\1\336\11\15\20\0\1\15" +
                  "\6\0\13\15\1\0\1\15\6\0\16\15\1\236\12\15" +
                  "\20\0\1\15\10\0\2\u012a\1\120\1\0\5\u012a\1\0" +
                  "\1\u012a\6\0\1\u012a\2\0\1\120\2\0\1\u012a\1\0" +
                  "\2\u012a\2\0\1\u012a\3\0\1\u012a\41\0\1\u012b\1\117" +
                  "\1\120\2\0\3\u012b\1\125\1\126\1\127\6\0\1\127" +
                  "\2\0\1\120\2\0\1\125\1\0\1\125\51\0\1\u012c" +
                  "\1\117\1\120\2\0\3\u012c\1\125\1\126\1\127\6\0" +
                  "\1\127\2\0\1\120\2\0\1\125\1\0\1\125\47\0" +
                  "\13\15\1\0\1\15\6\0\13\15\1\u012d\15\15\20\0" +
                  "\1\15\6\0\13\15\1\0\1\15\6\0\11\15\1\236" +
                  "\17\15\20\0\1\15\6\0\13\15\1\0\1\15\6\0" +
                  "\14\15\1\u012e\14\15\20\0\1\15\10\0\2\u012f\1\120" +
                  "\1\0\5\u012f\1\0\1\u012f\6\0\1\u012f\2\0\1\120" +
                  "\2\0\1\u012f\1\0\2\u012f\2\0\1\u012f\3\0\1\u012f" +
                  "\41\0\1\u0130\1\117\1\120\2\0\3\u0130\1\125\1\126" +
                  "\1\127\6\0\1\127\2\0\1\120\2\0\1\125\1\0" +
                  "\1\125\51\0\1\u0131\1\117\1\120\2\0\3\u0131\1\125" +
                  "\1\126\1\127\6\0\1\127\2\0\1\120\2\0\1\125" +
                  "\1\0\1\125\47\0\13\15\1\0\1\15\6\0\1\15" +
                  "\1\u0132\27\15\20\0\1\15\6\0\13\15\1\0\1\15" +
                  "\6\0\4\15\1\342\24\15\20\0\1\15\10\0\2\u0133" +
                  "\1\120\1\0\5\u0133\1\0\1\u0133\6\0\1\u0133\2\0" +
                  "\1\120\2\0\1\u0133\1\0\2\u0133\2\0\1\u0133\3\0" +
                  "\1\u0133\41\0\1\u0134\1\117\1\120\2\0\3\u0134\1\125" +
                  "\1\126\1\127\6\0\1\127\2\0\1\120\2\0\1\125" +
                  "\1\0\1\125\51\0\1\u0135\1\117\1\120\2\0\3\u0135" +
                  "\1\125\1\126\1\127\6\0\1\127\2\0\1\120\2\0" +
                  "\1\125\1\0\1\125\47\0\13\15\1\0\1\15\6\0" +
                  "\1\u0136\30\15\20\0\1\15\10\0\2\u0137\1\120\1\0" +
                  "\5\u0137\1\0\1\u0137\6\0\1\u0137\2\0\1\120\2\0" +
                  "\1\u0137\1\0\2\u0137\2\0\1\u0137\3\0\1\u0137\41\0" +
                  "\1\u0138\1\117\1\120\2\0\3\u0138\1\125\1\126\1\127" +
                  "\6\0\1\127\2\0\1\120\2\0\1\125\1\0\1\125" +
                  "\51\0\1\u0139\1\117\1\120\2\0\3\u0139\1\125\1\126" +
                  "\1\127\6\0\1\127\2\0\1\120\2\0\1\125\1\0" +
                  "\1\125\47\0\13\15\1\0\1\15\6\0\17\15\1\u0128" +
                  "\11\15\20\0\1\15\10\0\2\u013a\1\120\1\0\5\u013a" +
                  "\1\0\1\u013a\6\0\1\u013a\2\0\1\120\2\0\1\u013a" +
                  "\1\0\2\u013a\2\0\1\u013a\3\0\1\u013a\41\0\1\u013b" +
                  "\1\117\1\120\2\0\3\u013b\1\125\1\126\1\127\6\0" +
                  "\1\127\2\0\1\120\2\0\1\125\1\0\1\125\51\0" +
                  "\1\u013c\1\117\1\120\2\0\3\u013c\1\125\1\126\1\127" +
                  "\6\0\1\127\2\0\1\120\2\0\1\125\1\0\1\125" +
                  "\51\0\2\u013d\1\120\1\0\5\u013d\1\0\1\u013d\6\0" +
                  "\1\u013d\2\0\1\120\2\0\1\u013d\1\0\2\u013d\2\0" +
                  "\1\u013d\3\0\1\u013d\41\0\1\u013e\1\117\1\120\2\0" +
                  "\3\u013e\1\125\1\126\1\127\6\0\1\127\2\0\1\120" +
                  "\2\0\1\125\1\0\1\125\51\0\1\u013f\1\117\1\120" +
                  "\2\0\3\u013f\1\125\1\126\1\127\6\0\1\127\2\0" +
                  "\1\120\2\0\1\125\1\0\1\125\51\0\2\u0140\1\120" +
                  "\1\0\5\u0140\1\0\1\u0140\6\0\1\u0140\2\0\1\120" +
                  "\2\0\1\u0140\1\0\2\u0140\2\0\1\u0140\3\0\1\u0140" +
                  "\41\0\1\u0141\1\117\1\120\2\0\3\u0141\1\125\1\126" +
                  "\1\127\6\0\1\127\2\0\1\120\2\0\1\125\1\0" +
                  "\1\125\51\0\1\u0142\1\117\1\120\2\0\3\u0142\1\125" +
                  "\1\126\1\127\6\0\1\127\2\0\1\120\2\0\1\125" +
                  "\1\0\1\125\51\0\2\u0143\1\120\1\0\5\u0143\1\0" +
                  "\1\u0143\6\0\1\u0143\2\0\1\120\2\0\1\u0143\1\0" +
                  "\2\u0143\2\0\1\u0143\3\0\1\u0143\41\0\1\u0144\1\117" +
                  "\1\120\2\0\3\u0144\1\125\1\126\1\127\6\0\1\127" +
                  "\2\0\1\120\2\0\1\125\1\0\1\125\51\0\1\u0145" +
                  "\1\117\1\120\2\0\3\u0145\1\125\1\126\1\127\6\0" +
                  "\1\127\2\0\1\120\2\0\1\125\1\0\1\125\51\0" +
                  "\2\u0146\1\120\1\0\5\u0146\1\0\1\u0146\6\0\1\u0146" +
                  "\2\0\1\120\2\0\1\u0146\1\0\2\u0146\2\0\1\u0146" +
                  "\3\0\1\u0146\41\0\1\u0147\1\117\1\120\2\0\3\u0147" +
                  "\1\125\1\126\1\127\6\0\1\127\2\0\1\120\2\0" +
                  "\1\125\1\0\1\125\51\0\1\u0148\1\117\1\120\2\0" +
                  "\3\u0148\1\125\1\126\1\127\6\0\1\127\2\0\1\120" +
                  "\2\0\1\125\1\0\1\125\51\0\2\u0149\1\120\1\0" +
                  "\5\u0149\1\0\1\u0149\6\0\1\u0149\2\0\1\120\2\0" +
                  "\1\u0149\1\0\2\u0149\2\0\1\u0149\3\0\1\u0149\41\0" +
                  "\1\u014a\1\117\1\120\2\0\3\u014a\1\125\1\126\1\127" +
                  "\6\0\1\127\2\0\1\120\2\0\1\125\1\0\1\125" +
                  "\51\0\1\u014b\1\117\1\120\2\0\3\u014b\1\125\1\126" +
                  "\1\127\6\0\1\127\2\0\1\120\2\0\1\125\1\0" +
                  "\1\125\51\0\2\u014c\1\120\1\0\5\u014c\1\0\1\u014c" +
                  "\6\0\1\u014c\2\0\1\120\2\0\1\u014c\1\0\2\u014c" +
                  "\2\0\1\u014c\3\0\1\u014c\41\0\1\u014d\1\117\1\120" +
                  "\2\0\3\u014d\1\125\1\126\1\127\6\0\1\127\2\0" +
                  "\1\120\2\0\1\125\1\0\1\125\53\0\1\120\21\0" +
                  "\1\120\56\0\1\u014e\1\117\1\120\2\0\3\u014e\1\125" +
                  "\1\126\1\127\6\0\1\127\2\0\1\120\2\0\1\125" +
                  "\1\0\1\125\51\0\1\u014f\1\117\1\120\2\0\3\u014f" +
                  "\1\125\1\126\1\127\6\0\1\127\2\0\1\120\2\0" +
                  "\1\125\1\0\1\125\51\0\1\u0150\1\117\1\120\2\0" +
                  "\3\u0150\1\125\1\126\1\127\6\0\1\127\2\0\1\120" +
                  "\2\0\1\125\1\0\1\125\51\0\1\u0151\1\117\1\120" +
                  "\2\0\3\u0151\1\125\1\126\1\127\6\0\1\127\2\0" +
                  "\1\120\2\0\1\125\1\0\1\125\51\0\2\117\1\120" +
                  "\2\0\3\117\1\125\1\126\1\127\6\0\1\127\2\0" +
                  "\1\120\2\0\1\125\1\0\1\125\41\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[20435];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unkown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\6\0\1\11\1\1\2\11\7\1\2\11\24\1\10\11" +
                  "\2\1\1\11\5\1\2\11\1\1\2\11\1\1\1\11" +
                  "\1\1\1\11\3\1\1\11\6\1\1\11\1\1\1\0" +
                  "\2\1\1\11\1\0\3\1\1\11\1\1\10\0\52\1" +
                  "\1\11\1\1\1\0\1\1\1\11\1\0\5\1\5\0" +
                  "\1\1\4\0\55\1\1\11\1\0\3\1\10\0\42\1" +
                  "\1\0\1\11\4\0\25\1\1\11\3\0\36\1\1\0" +
                  "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0" +
                  "\2\1\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[337];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * the input device
   */
  private java.io.Reader zzReader;

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[BUFFERSIZE];

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the textposition at the last state to be included in yytext
   */
  private int zzPushbackPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * number of newlines encountered up to the start of the matched text
   */
  private int yyline;

  /**
   * the number of characters up to the start of the matched text
   */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /* user code: */


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param in the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzPushbackPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
            zzBuffer.length - zzEndRead);

    if (numRead < 0) {
      return true;
    } else {
      zzEndRead += numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   * <p>
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public Type yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar += zzMarkedPosL - zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: {
          return Type.SEMICOLON;
        }
        case 33:
          break;
        case 19: {
          yybegin(YYINITIAL);
          return Type.NEW_LINE;
        }
        case 34:
          break;
        case 7: {
          return Type.DOT;
        }
        case 35:
          break;
        case 18: {
          return Type.STRING;
        }
        case 36:
          break;
        case 5: {
          return Type.IDENTIFIER;
        }
        case 37:
          break;
        case 20: {
          yybegin(YYINITIAL);
          return Type.STRING;
        }
        case 38:
          break;
        case 23: {
          return Type.PRETREATMENT_LINE;
        }
        case 39:
          break;
        case 3: {
          return Type.WHITE_SPACE;
        }
        case 40:
          break;
        case 24: {
          return Type.DEFINE_LINE;
        }
        case 41:
          break;
        case 32: {
          yybegin(PRETREATMENT);
          return Type.PRETREATMENT_LINE;
        }
        case 42:
          break;
        case 4: {
          return Type.OPERATOR;
        }
        case 43:
          break;
        case 9: {
          yybegin(CHARLITERAL);
          return Type.CHARACTER_LITERAL;
        }
        case 44:
          break;
        case 13: {
          return Type.RIGHT_BRACE;
        }
        case 45:
          break;
        case 11: {
          return Type.RIGHT_PARENTHESIS;
        }
        case 46:
          break;
        case 25: {
          yybegin(DEFINE_NEW_LINE);
          return Type.DEFINE_LINE;
        }
        case 47:
          break;
        case 15: {
          return Type.RIGHT_BRACKET;
        }
        case 48:
          break;
        case 28: {
          return Type.FLOATING_POINT_LITERAL;
        }
        case 49:
          break;
        case 22: {
          yybegin(YYINITIAL);
          return Type.CHARACTER_LITERAL;
        }
        case 50:
          break;
        case 26: {
          yybegin(DEFINE);
          return Type.DEFINE_LINE;
        }
        case 51:
          break;
        case 21: {
          return Type.CHARACTER_LITERAL;
        }
        case 52:
          break;
        case 2: {
          return Type.NEW_LINE;
        }
        case 53:
          break;
        case 8: {
          yybegin(STRING);
          return Type.STRING;
        }
        case 54:
          break;
        case 31: {
          {
            yybegin(DEFINE);
            return Type.DEFINE_LINE;
          }
        }
        case 55:
          break;
        case 27: {
          return Type.COMMENT;
        }
        case 56:
          break;
        case 12: {
          return Type.LEFT_BRACE;
        }
        case 57:
          break;
        case 10: {
          return Type.LEFT_PARENTHESIS;
        }
        case 58:
          break;
        case 29: {
          return Type.KEYWORD;
        }
        case 59:
          break;
        case 6: {
          return Type.INTEGER_LITERAL;
        }
        case 60:
          break;
        case 14: {
          return Type.LEFT_BRACKET;
        }
        case 61:
          break;
        case 30: {
          yybegin(YYINITIAL);
          return Type.COMMENT;
        }
        case 62:
          break;
        case 1: {
          throw new RuntimeException("Illegal character \"" + yytext() +
                  "\" at line " + yyline + ", column " + yycolumn);
        }
        case 63:
          break;
        case 17: {
          return Type.COMMA;
        }
        case 64:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            {
              return Type.EOF;
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}